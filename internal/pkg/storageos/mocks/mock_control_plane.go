// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/storageos/cluster-operator/internal/pkg/storageos (interfaces: ControlPlane)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/storageos/go-api/v2"
)

// MockControlPlane is a mock of ControlPlane interface.
type MockControlPlane struct {
	ctrl     *gomock.Controller
	recorder *MockControlPlaneMockRecorder
}

// MockControlPlaneMockRecorder is the mock recorder for MockControlPlane.
type MockControlPlaneMockRecorder struct {
	mock *MockControlPlane
}

// NewMockControlPlane creates a new mock instance.
func NewMockControlPlane(ctrl *gomock.Controller) *MockControlPlane {
	mock := &MockControlPlane{ctrl: ctrl}
	mock.recorder = &MockControlPlaneMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControlPlane) EXPECT() *MockControlPlaneMockRecorder {
	return m.recorder
}

// AuthenticateUser mocks base method.
func (m *MockControlPlane) AuthenticateUser(arg0 context.Context, arg1 api.AuthUserData) (api.UserSession, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateUser", arg0, arg1)
	ret0, _ := ret[0].(api.UserSession)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AuthenticateUser indicates an expected call of AuthenticateUser.
func (mr *MockControlPlaneMockRecorder) AuthenticateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateUser", reflect.TypeOf((*MockControlPlane)(nil).AuthenticateUser), arg0, arg1)
}

// GetCluster mocks base method.
func (m *MockControlPlane) GetCluster(arg0 context.Context) (api.Cluster, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", arg0)
	ret0, _ := ret[0].(api.Cluster)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockControlPlaneMockRecorder) GetCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockControlPlane)(nil).GetCluster), arg0)
}

// RefreshJwt mocks base method.
func (m *MockControlPlane) RefreshJwt(arg0 context.Context) (api.UserSession, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshJwt", arg0)
	ret0, _ := ret[0].(api.UserSession)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RefreshJwt indicates an expected call of RefreshJwt.
func (mr *MockControlPlaneMockRecorder) RefreshJwt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshJwt", reflect.TypeOf((*MockControlPlane)(nil).RefreshJwt), arg0)
}

// UpdateCluster mocks base method.
func (m *MockControlPlane) UpdateCluster(arg0 context.Context, arg1 api.UpdateClusterData, arg2 *api.UpdateClusterOpts) (api.Cluster, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].(api.Cluster)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateCluster indicates an expected call of UpdateCluster.
func (mr *MockControlPlaneMockRecorder) UpdateCluster(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCluster", reflect.TypeOf((*MockControlPlane)(nil).UpdateCluster), arg0, arg1, arg2)
}
